plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'com.github.gmazzo.buildconfig' version '3.1.0'
}

def majorVersion = "0"
def flavor = "alpha"
// name 'andropiler'
group 'com.thatmg393'
version "${majorVersion}.${getCommitCount()}"

repositories {
    // Repositories to search for the dependencies
    mavenCentral()
}

dependencies {
    // Put your dependencies here
    implementation 'org.json:json:20220320'
    implementation 'commons-io:commons-io:2.11.0'
    // implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'info.picocli:picocli:4.6.3'
    
}

buildConfig {
    def build_time = getDate() // Fix for Annotation error.

    // Fix for numbers getting replaced by underscores
    packageName("${project.group.toString()}.${rootProject.name}")

    buildConfigField('String', 'APP_NAME', "\"${rootProject.name}\"")
    buildConfigField('String', 'APP_VERSION_FULL', "\"${flavor}_${project.version}-${getLatestCommitTag()}-build_${build_time}\"")
    buildConfigField('String', 'APP_VERSION_DISPLAY', "\"${project.version}-${flavor}\"")
    buildConfigField('String', 'APP_BUILD_FLAVOR', "\"${flavor}\"")
    buildConfigField('String', 'APP_BUILD_TIME', "\"${build_time}\"")
    buildConfigField('String', 'APP_BUILD_TIME_FORMATTED', "\"${getDateFormatted()}\"")
    buildConfigField('String', 'APP_BUILD_COMMIT_HASH', "\"${getLatestCommitHash()}\"")
    buildConfigField('String', 'APP_BUILD_COMMIT_TAG', "\"${getLatestCommitTag()}\"")
    buildConfigField('String', 'APP_BUILD_COMMIT_COUNT', "\"${getCommitCount()}\"")
    buildConfigField('String', 'APP_BUILD_PLATFORM', "\"${getBuildPlatform()}\"")
}

application {
    // Define the main class for the application.
    mainClass = 'com.thatmg393.andropiler.App'
}

run {
    standardInput = System.in 
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes 'Package-Title': "${rootProject.name}"
        attributes 'Package-Version': "${project.version}"
        attributes 'Package-Vendor': 'ThatMG393'
        attributes 'Built-By': 'ThatMG393'
        attributes 'Build-Jdk': '17-internal'
        attributes 'Main-Class': 'com.thatmg393.andropiler.App'
        attributes 'Created-By': 'Gradle 7.2 [Java 17-internal (Oracle Corporation)]'
        attributes 'Specification-Title': "${rootProject.name}"
        attributes 'Specification-Version': "${project.version}"
        attributes 'Specification-Vendor': 'ThatMG393'
    }
    // archiveClassifier = "all" 
    // TODO: Maybe add a archive that already has AAPT2 so the archive doesnt download AAPT2. (Technically faster.)
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def getLatestCommitHash() {
    def baos = new ByteArrayOutputStream()
    exec { // Get latest commit hash
        commandLine "git", "log", "-1", "--format=%H"
        standardOutput = baos
    }
    return baos.toString().trim()
}

def getCommitCount() {
    def baos = new ByteArrayOutputStream() 
    exec { // Get commit count
        commandLine "git", "rev-list", "--count", "${getLatestCommitHash()}"
        standardOutput = baos
    }
    return baos.toString().trim()
}

def getLatestCommitTag() {
    def baos = new ByteArrayOutputStream() 
    exec { // Get commit tag
        commandLine "git", "rev-parse", "--short", "${getLatestCommitHash()}"
        standardOutput = baos
    }
    return baos.toString().trim()
}

def getBuildPlatform() {
    def baos = new ByteArrayOutputStream()
    try {
        // println("Getting OS...")
        exec {
            commandLine "uname", "-srmo"
            standardOutput = baos
        }
        return baos.toString().trim()
    } catch (Exception e) {
        // println("Hmmmm, 'uname' not found... Let's try 'ver'")
        try {
            exec {
                commandLine "ver"
                standardOutput = baos
            }
            return baos.toString().trim()
        } catch (Exception e2) {
            println("Failed to get OS!")
        }
    }
    return "Unknown OS"
}

def getDate() {
    return new Date().format("yyyyMMddHHmmss")
}

def getDateFormatted() {
    return new Date().format("yyyy-MM-dd HH:mm:ss z")
}
